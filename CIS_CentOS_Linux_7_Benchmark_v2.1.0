#!/bin/bash

# Created from this document:
# https://benchmarks.cisecurity.org/tools2/linux/CIS_CentOS_Linux_7_Benchmark_v2.1.0.pdf

# When possible, we should be using the hardening techniques in this document,
# as it is more authoritative than the CIS document:
# https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/chap-Hardening_Your_System_with_Tools_and_Services.html
 
set -x
 
cat << NOCAT > /etc/modprobe.d/CIS.conf
install cramfs /bin/true
install freevxfs /bin/true
install jffs2 /bin/true
install hfs /bin/true
install hfsplus /bin/true
install squashfs /bin/true
install udf /bin/true
install vfat /bin/true
NOCAT
 
sed -i -r '
s#/dev/mapper/ol-tmp[ ]+/tmp[ ]+xfs[ ]+defaults[ ]+0[ ]+0#/dev/mapper/ol-tmp /tmp xfs rw,nosuid,nodev,noexec,auto,nouser,async 0 0#;
s#/dev/mapper/ol-var_tmp[ ]+/var/tmp[ ]+xfs[ ]+defaults[ ]+0[ ]+0#/dev/mapper/ol-var_tmp /var/tmp xfs rw,nosuid,nodev,noexec,auto,nouser,async 0 0#;
s#/dev/mapper/ol-home[ ]+/home[ ]+xfs[ ]+defaults[ ]+0[ ]+0#/dev/mapper/ol-home /home xfs rw,suid,nodev,exec,auto,nouser,async 0 0#;
' /etc/fstab
 
if ! $(grep -qF 'tmpfs /dev/shm tmpfs rw,nosuid,nodev,noexec,auto,nouser,async 0 0' /etc/fstab); then
  echo -e '\ntmpfs /dev/shm tmpfs rw,nosuid,nodev,noexec,auto,nouser,async 0 0' >> /etc/fstab
fi
 
df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d -perm -0002 2>/dev/null | xargs chmod a+t
 
# This breaks AWS encryption
#systemctl disable autofs
 
sed -i -r 's/^gpgcheck=0/gpgcheck=1/' /etc/yum.conf /etc/yum.repos.d/*.repo
if ! $(grep -qE '^gpgcheck=1' /etc/yum.conf); then
  echo -e '\ngpgcheck=1' >> /etc/yum.conf
fi
 
# Ensure AIDE is installed
 
# Ensure filesystem integrity is regularly checked
 
chown root:root /boot/grub2/grub.cfg
chmod 644 /boot/grub2/grub.cfg
 
# Ensure bootloader password is set
 
echo '* hard core 0' > /etc/security/limits.d/CIS.conf
 
cat << NOCAT > /etc/sysctl.d/CIS.conf
fs.suid_dumpable = 0
kernel.randomize_va_space = 2
net.ipv4.ip_forward = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.tcp_syncookies = 1
net.ipv6.conf.all.accept_ra = 0
net.ipv6.conf.default.accept_ra = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
NOCAT
sysctl --system
 
prelink -ua
yum remove -y prelink
 
cat /dev/null > /etc/motd
 
chown root:root /etc/motd
chmod 644 /etc/motd
 
chown root:root /etc/issue
chmod 644 /etc/issue
 
# Ensure GDM login banner is configured
 
# These may not be relevant - I don't see any of these services in systemctl:
# Ensure chargen services are not enabled
# Ensure daytime services are not enabled
# Ensure discard services are not enabled
# Ensure echo services are not enabled 
# Ensure time services are not enabled
# Ensure tftp server is not enabled
# Ensure xinetd is not enabled
 
# Ensure ntp is configured
 
# Ensure chrony is configured
 
yum remove -y xorg-x11*
 
systemctl disable avahi-daemon
 
systemctl disable cups
 
# Ensure DHCP Server is not enabled
# Don't want to do this, because AWS uses DHCP.
 
systemctl disable slapd
 
systemctl disable nfs
systemctl disable rpcbind
 
systemctl disable named
 
systemctl disable vsftpd
 
# Ensure HTTP server is not enabled
 
systemctl disable dovecot
 
systemctl disable smb
 
systemctl disable squid
 
systemctl disable snmpd
 
# Ensure mail transfer agent is configured for local-only mode
 
systemctl disable ypserv
 
systemctl disable rsh.socket
systemctl disable rlogin.socket
systemctl disable rexec.socket
 
systemctl disable ntalk
 
systemctl disable telnet.socket
 
systemctl disable tftp.socket
 
systemctl disable rsyncd
 
yum remove -y ypbind
 
yum remove -y rsh
 
yum remove -y talk
 
# Brady wants to keep telnet
# yum remove -y telnet
 
# We use OpenLDAP
#yum remove -y openldap-clients
 
yum install -y tcp_wrappers
 
# Ensure /etc/hosts.allow is configured
 
# Ensure /etc/hosts.deny is configured
 
chown root:root /etc/hosts.allow
chmod 644 /etc/hosts.allow
 
chown root:root /etc/hosts.deny
chmod 644 /etc/hosts.deny
 
yum install -y iptables
 
# Ensure default deny firewall policy
 
# Ensure loopback traffic is configured
 
# Ensure firewall rules exist for all open ports
 
# Logging and Auditing
# Need to install logwatch and aureport I think?
 
# Configure System Accounting
 
systemctl enable rsyslog
 
# Ensure rsyslog default file permissions configured
 
# Ensure rsyslog is configured to send logs to a remote log host
 
# Skipping "Configure syslog-ng" section since we're using rsyslog.
 
find /var/log -type f -exec chmod g-wx,o-rwx {} +
 
systemctl enable crond
 
chown root:root /etc/crontab
chmod 644 /etc/crontab
 
chown root:root /etc/cron.hourly
chmod 755 /etc/cron.hourly
 
chown root:root /etc/cron.daily
chmod 755 /etc/cron.daily
 
chown root:root /etc/cron.weekly
chmod 755 /etc/cron.weekly
 
chown root:root /etc/cron.monthly
chmod 755 /etc/cron.monthly
 
chown root:root /etc/cron.d
chmod 755 /etc/cron.d
 
rm /etc/cron.deny
rm /etc/at.deny
touch /etc/cron.allow
touch /etc/at.allow
chmod 600 /etc/cron.allow
chmod 600 /etc/at.allow
chown root:root /etc/cron.allow
chown root:root /etc/at.allow
 
chown root:root /etc/ssh/sshd_config
chmod 600 /etc/ssh/sshd_config
 
sed -i -r '/^Protocol/d' /etc/ssh/sshd_config
 
sed -i -r '/^LogLevel/d' /etc/ssh/sshd_config
 
sed -i -r '/^X11Forwarding/d' /etc/ssh/sshd_config
 
sed -i -r 's/^MaxAuthTries.*/MaxAuthTries 4/' /etc/ssh/sshd_config
 
sed -i -r '/^IgnoreRhosts/d' /etc/ssh/sshd_config
 
sed -i -r '/^HostbasedAuthentication/d' /etc/ssh/sshd_config
 
# Ensure SSH root login is disabled
 
sed -i -r '/^PermitEmptyPasswords/d' /etc/ssh/sshd_config
 
sed -i -r '/^PermitUserEnvironment/d' /etc/ssh/sshd_config
 
sed -i -r '/^Ciphers/d' /etc/ssh/sshd_config
echo -e '\nCiphers aes256-ctr,aes192-ctr,aes128-ctr' >> /etc/ssh/sshd_config
 
sed -i -r '/^MACs/d' /etc/ssh/sshd_config
echo -e '\nMACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com' >> /etc/ssh/sshd_config
 
# This is really annoying - it kicks out any inactive SSH session after 5 minutes.
#sed -i -r '/^ClientAlive/d' /etc/ssh/sshd_config
#cat << END >> /etc/ssh/sshd_config
#
#ClientAliveInterval 300
#ClientAliveCountMax 0
#END
 
sed -i -r '/^LoginGraceTime/d' /etc/ssh/sshd_config
echo -e '\nLoginGraceTime 60' >> /etc/ssh/sshd_config
 
# Ensure SSH access is limited
 
# Ensure SSH warning banner is configured
 
sed -i -r '/^(minlen|[duol]credit)/d' /etc/security/pwquality.conf
cat << END >> /etc/security/pwquality.conf
minlen=14
dcredit=-1
ucredit=-1
ocredit=-1
lcredit=-1
END
 
# Ensure lockout for failed password attempts is configured
 
# Ensure password reuse is limited
 
# Ensure password hashing algorithm is SHA-512
 
# Ensure password expiration is 90 days or less
 
# Ensure minimum days between password changes is 7 or more
 
# Ensure password expiration warning days is 7 or more
 
# Ensure inactive password lock is 30 days or less
 
for user in $(awk -F: '($3 < 1000) { print $1 }' /etc/passwd); do
    if [ $user != "root" ]; then
        usermod -L $user
        if [ $user != "sync" ] && [ $user != "shutdown" ] && [ $user != "halt" ]; then
            usermod -s /sbin/nologin $user
        fi
    fi
done
 
usermod -g 0 root
 
# Ensure default user umask is 027 or more restrictive
 
# Ensure access to the su command is restricted
 
chown root:root /etc/passwd
chmod 644 /etc/passwd
 
chown root:root /etc/shadow
chmod 000 /etc/shadow
 
chown root:root /etc/group
chmod 644 /etc/group
 
chown root:root /etc/gshadow
chmod 000 /etc/gshadow
 
chown root:root /etc/passwd-
chmod 600 /etc/passwd-
 
# Ensure permissions on /etc/shadow- are configured
# I changed this from 600 to 000. The default permission on a clean install is actually more secure than CIS recommendation.
chown root:root /etc/shadow-
chmod 000 /etc/shadow-
 
chown root:root /etc/group-
chmod 600 /etc/group-
 
# Ensure permissions on /etc/gshadow- are configured
# I changed this from 600 to 000. The default permission on a clean install is actually more secure than CIS recommendation.
chown root:root /etc/gshadow-
chmod 000 /etc/gshadow-
 
# Ensure no world writable files exist
 
# Ensure no unowned files or directories exist
 
# Ensure no ungrouped files or directories exist
 
for user_with_no_passwd in $(cat /etc/shadow | awk -F: '($2 == "" ) { print $1 }'); do
    passwd -l $user_with_no_passwd
done
 
sed -i -r '/^\+:/d' /etc/passwd
 
sed -i -r '/^\+:/d' /etc/shadow
 
sed -i -r '/^\+:/d' /etc/group
 
for user_with_uid_0 in $(cat /etc/passwd | awk -F: '($3 == 0) { print $1 }'); do
    if [[ $user_with_uid_0 != 'root' ]]; then
        sed -i -r "/^${user_with_uid_0}:/d" /etc/passwd
    fi
done
 
# Ensure root PATH Integrity
 
# Ensure all users' home directories exist
 
# Ensure users' home directories permissions are 750 or more restrictive
 
# Ensure users own their home directories
 
# Ensure users' dot files are not group or world writable
 
for dir in $(cat /etc/passwd | awk -F: '{ print $6 }'); do
    rm -v "$dir/.forward"
    rm -v "$dir/.netrc"
    rm -vrf "$dir/.rhosts"
done
 
# Ensure users' .netrc Files are not group or world accessible
# This is irrelevant because we have just deleted all .netrc files.
 
# Ensure all groups in /etc/passwd exist in /etc/group
 
# Ensure no duplicate UIDs exist
 
# Ensure no duplicate GIDs exist
 
# Ensure no duplicate user names exist
 
# Ensure no duplicate group names exist
